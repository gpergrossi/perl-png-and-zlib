use strict;
use warnings;
use Data::Dumper;

use File::Basename;
use lib dirname (__FILE__);
use Image;
use Zlib;
use Png;
use Compress::Zlib;

sub min {
   my ($a, $b) = @_;
   return ($a < $b) ? $a : $b;
}

sub compare_arrays {
   my ($mine, $true) = @_;
   
   my $mismatch_index = -1;
   my $length = min(scalar($mine->@*), scalar($true->@*));
   for (my $i = 0; $i < $length; $i++) {
      if ($mine->[$i] != $true->[$i]) {
         $mismatch_index = $i;
         last;
      }
   }
   if ($mismatch_index == -1 && scalar($mine->@*) != scalar($true->@*)) {
      $mismatch_index = $length;
   }
   
   if ($mismatch_index == -1) {
      print "My implementation and the true implementation agree!\n";
      print "\n\n";
   } else {
      print "My implementation and the true implementation don't agree.\n";
      print "First mismatch at index $mismatch_index\n";
      
      my @true_parts = map { sprintf("0x%02x", $_) } $true->@*;
      my @my_parts = map { sprintf("0x%02x", $_) } $mine->@*;
      
      print "True implementation:\n";
      for (my $i = 0; $i < scalar(@true_parts); $i++) {
         if ($i == $mismatch_index) {
            print "($true_parts[$i]), ";
         } else {
            print "$true_parts[$i], ";
         }
      }
      print "\n";
      print "My Implementation:\n";
      for (my $i = 0; $i < scalar(@my_parts); $i++) {
         if ($i == $mismatch_index) {
            print "($my_parts[$i]), ";
         } else {
            print "$my_parts[$i], ";
         }
      }
      print "\n";
   }
}

#show_map($map);

#Zlib::Test();
#Image::Test();

my $test_data = [
  0x20, 0x78, 0xF0, 0x80, 0xE0, 0x60, 0x20, 0xC0, 0x58, 0xD8, 0xD8, 0xC8, 0x98, 0x98, 0x68, 0x18, 
  0x68, 0x98, 0x68, 0xD8, 0x48, 0xE8, 0x20, 0xC0, 0x50, 0xD0, 0x50, 0x10, 0x80, 0x80, 0x60, 0x50, 
  0x30, 0xF0, 0x40, 0x30, 0x18, 0x58, 0x98, 0x28, 0xF8, 0x58, 0xB8, 0x48, 0xF8, 0x18, 0x98, 0x38, 
  0x48, 0x38, 0xF0, 0x20, 0xF0, 0xC0, 0xF0, 0xC0, 0x70, 0x20, 0xD0, 0xC0, 0x40, 0xA0, 0x30, 0xC0, 
  0xB8, 0xC8, 0xE8, 0xC8, 0x98, 0x28, 0xC8, 0xD8, 0xB8, 0x08, 0xE8, 0x88, 0x78, 0x68, 0x80, 0x50, 
  0x80, 0x90, 0xF0, 0x90, 0x20, 0xA0, 0x10, 0x20, 0x80, 0x10, 0xD0, 0xA0, 0x98, 0x48, 0xC8, 0x88, 
  0x68, 0x38, 0xD8, 0x78, 0x38, 0x18, 0xF8, 0x68, 0xC8, 0x78, 0xD0, 0x80, 0x60, 0x60, 0x50, 0x20, 
  0x70, 0xF0, 0xD0, 0xB0, 0x40, 0xA0, 0x60, 0x50, 0xC0, 0x28, 0xD8, 0x98, 0x38, 0xF8, 0x38, 0xF8, 
  0x68, 0xE8, 0xD8, 0xA8, 0x88, 0x88, 0x18, 0x90, 0x40, 0x20, 0x20, 0xE0, 0xA0, 0x40, 0x70, 0x20, 
  0x80, 0x20, 0x20, 0x30, 0x80, 0x28, 0x18, 0x48, 0xE8, 0xB8, 0xD8, 0x28, 0xC8, 0x68, 0xC8, 0x48, 
  0xA8, 0x68, 0xC8, 0x80, 0xB0, 0x70, 0x70, 0x60, 0x60, 0x20, 0xF0, 0x80, 0xF0, 0x80, 0x70, 0x30, 
  0x20, 0xC8, 0xD8, 0xA8, 0x78, 0x28, 0xF8, 0x68, 0x78, 0x48, 0x78, 0xC8, 0xF8, 0xC8, 0xD8, 0xB0, 
  0x40, 0x80, 0x40, 0xE0, 0x10, 0x30, 0x60, 0x10, 0x50, 0xF0, 0xE0, 0xF0, 0x70, 0x98, 0xC8, 0x88, 
  0x38, 0x98, 0xA8, 0x58, 0xA8, 0x88, 0xB8, 0x48, 0x28, 0x38, 0xC8, 0x50, 0x80, 0x60, 0x20, 0x60, 
  0xC0, 0xD0, 0xA0, 0x50, 0xD0, 0x70, 0x70, 0x70, 0x50, 0x98, 0xF8, 0x68, 0x48, 0x48, 0x48, 0x18, 
  0x08, 0x68, 0x18, 0xC8, 0xB8, 0xC8, 0x98, 0x60, 0x30, 0xD0, 0x70, 0xE0, 0x10, 0xC0, 0xA0, 0xB0, 
  0xF0
];

print "\n";
print "Comparing Zlib implementations...\n";

# Compute true output
my $test_data_as_scalar = join("", map { chr($_) } $test_data->@*);
my $compressed = Compress::Zlib::compress($test_data_as_scalar, $Compress::Zlib::Z_NO_COMPRESSION);
my @true_zlib_output = map { ord($_) } split(//, $compressed);

# Compute my output
my $my_zlib_output = Zlib::Compress($test_data);

# Compare
compare_arrays($my_zlib_output, \@true_zlib_output);

print "\n";
print "Comparing PNG implementations...\n";


# True PNG data decoded from Base64 working PNG on the internet
my $true_png_data = [ 0x89, 0x50, 0x4E, 0x47, 0x0D, 0x0A, 0x1A, 0x0A, 0x00, 0x00, 0x00, 0x0D, 0x49, 0x48, 0x44, 0x52, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x08, 0x06, 0x00, 0x00, 0x00, 0x1F, 0x15, 0xC4, 0x89, 0x00, 0x00, 0x00, 0x10, 0x49, 0x44, 0x41, 0x54, 0x78, 0x01, 0x01, 0x05, 0x00, 0xFA, 0xFF, 0x00, 0x32, 0x78, 0xFF, 0xBF, 0x04, 0xF2, 0x02, 0x69, 0x44, 0xF2, 0x12, 0x97, 0x00, 0x00, 0x00, 0x00, 0x49, 0x45, 0x4E, 0x44, 0xAE, 0x42, 0x60, 0x82 ];

# Compute my PNG data
my $test_image = new Image(1, 1);
$test_image->SetColor(0, 0, 50, 120, 255, 191);
my $my_png_data = Png::CreatePng($test_image);

# Compare
compare_arrays($my_png_data, $true_png_data);